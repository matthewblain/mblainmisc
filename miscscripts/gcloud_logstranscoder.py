"""Google Cloud Logs Transcoder.

Read a JSON file exported from the 'new' Logs Viewer (as of late 2020) and write
a CSV file which is sort-of-apache-logs-format, but at least usable!

In particular, this works to pull out requests which are sent to 
App Engine and Google Cloud Storage, each of which uses a different format.
It will ignore requests which don't look like that, which may be for
all sorts of other purposes (audits, etc).

The logs viewer probably allows you to generate a query which would do
the pre-filtering, but I have not yet figured out how to do this.

It may be possible to adapt this to the YAML format generated by
gcloud logs read, or have a command line from that which generates
a similar JSON?

Note: this was written quickly in frustration, and may therefore
be quite fragile.

Usage: logstranscoder input.json output.csv.
"""


import csv
import json
import sys


def json2csv(fjson, fcsv):
    reader = json.load(fjson)
    writer = csv.writer(fcsv)
    # There's probably an apache standard for these headers but whatever.
    writer.writerow(["ts", "path", "responsecode", "responseSize"])

    for e in reader:
        write = False
        path = ""
        status = ""
        size = ""
        ts = e.get("timestamp")
        if (
            e.get("protoPayload")
            and e["protoPayload"].get("@type", "")
            == "type.googleapis.com/google.appengine.logging.v1.RequestLog"
        ):
            l = e["protoPayload"]

            path = "http?://%s%s" % (l["host"], l["resource"])
            status = l["status"]
            size = l["responseSize"]
            write = True

        elif e.get("httpRequest"):
            l = e["httpRequest"]

            path = l["requestUrl"]
            status = l["status"]
            size = l["responseSize"]
            write = True

        if write:
            writer.writerow([ts, path, status, size])


def main(argv):
    with open(argv[1], "r") as fjson:
        with open(argv[2], "w") as fcsv:
            json2csv(fjson, fcsv)


if __name__ == "__main__":
    main(sys.argv)
